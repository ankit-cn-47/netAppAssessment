pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-docker-registry.com'
        DOCKER_IMAGE_NAME = 'your-docker-image-name'
        GIT_REPO_URL = 'https://github.com/ankit-cn-47/netAppAssessment.git'
        GIT_BRANCH = 'main'  // Specify the branch name
    }

    stages {
        stage('Clone') {
            steps {
                script {
                    try {
                        checkout([$class: 'GitSCM',
                                  branches: [[name: "${GIT_BRANCH}"]],
                                  doGenerateSubmoduleConfigurations: false,
                                  extensions: [],
                                  submoduleCfg: [],
                                  userRemoteConfigs: [[url: "${GIT_REPO_URL}"]]])
                    } catch (Exception e) {
                        echo "Failed to clone repository: ${e.message}"
                        error("Failed to clone repository")
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    try {
                        dir('nodeApp') {
                            sh 'npm install'
                            sh 'npm test'
                        }
                    } catch (Exception e) {
                        echo "Failed to run tests: ${e.message}"
                        error("Failed to run tests")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        def versionTag = "${env.BUILD_NUMBER}-${env.GIT_COMMIT[0..7]}"
                        def dockerImage = docker.build("$DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$versionTag")
                        dockerImage.inside {
                            sh 'npm install'
                            sh 'npm run build'
                        }
                    } catch (Exception e) {
                        echo "Failed to build Docker image: ${e.message}"
                        error("Failed to build Docker image")
                    }
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    try {
                        def versionTag = "${env.BUILD_NUMBER}-${env.GIT_COMMIT[0..7]}"
                        docker.withRegistry("https://$DOCKER_REGISTRY", 'docker-credentials-id') {
                            docker.image("$DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$versionTag").push()
                        }
                    } catch (Exception e) {
                        echo "Failed to push Docker image to registry: ${e.message}"
                        error("Failed to push Docker image to registry")
                    }
                }
            }
        }
    }
}
